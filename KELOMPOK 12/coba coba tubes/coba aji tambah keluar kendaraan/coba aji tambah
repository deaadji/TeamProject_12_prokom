import tkinter as tk
from tkinter import messagebox
import pandas as pd
import random
import datetime

class ParkingLotApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Parking Lot Program")

        # Create labels and entry widgets
        tk.Label(root, text="Plate Number:").grid(row=0, column=0, padx=5, pady=5)
        self.plate_entry = tk.Entry(root)
        self.plate_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(root, text="Date Time (YYYY-MM-DD HH:MM:SS):").grid(row=1, column=0, padx=5, pady=5)
        self.datetime_entry = tk.Entry(root)
        self.datetime_entry.grid(row=1, column=1, padx=5, pady=5)

        tk.Label(root, text="Unique Random Code:").grid(row=2, column=0, padx=5, pady=5)
        self.code_entry = tk.Entry(root)
        self.code_entry.grid(row=2, column=1, padx=5, pady=5)

        # Create buttons
        self.save_button = tk.Button(root, text="Save to CSV", command=self.save_to_csv)
        self.save_button.grid(row=3, column=0, columnspan=2, padx=5, pady=5, sticky="we")

        self.read_button = tk.Button(root, text="Read CSV and Calculate Cost", command=self.read_csv)
        self.read_button.grid(row=4, column=0, columnspan=2, padx=5, pady=5, sticky="we")

    def save_to_csv(self):
        plate_number = self.plate_entry.get()
        date_time = self.datetime_entry.get()
        code = self.code_entry.get()

        # Check if any field is empty
        if not (plate_number and date_time and code):
            messagebox.showerror("Error", "Please fill in all fields.")
            return

        # Save data to CSV
        data = {'Plate Number': [plate_number],
                'Date Time': [date_time],
                'Unique Random Code': [code]}
        df = pd.DataFrame(data)
        df.to_csv('parking_data.csv', mode='a', index=False, header=not bool(pd.read_csv('parking_data.csv').shape[0]))

        # Clear entry fields after saving
        self.plate_entry.delete(0, 'end')
        self.datetime_entry.delete(0, 'end')
        self.code_entry.delete(0, 'end')

        messagebox.showinfo("Success", "Data saved to CSV.")

    def read_csv(self):
        try:
            df = pd.read_csv('parking_data.csv')
            messagebox.showinfo("Data Read Successful", "Data read from CSV.")
        except FileNotFoundError:
            messagebox.showerror("Error", "CSV file not found.")
            return

        # Display data
        display_window = tk.Toplevel(self.root)
        display_window.title("Parking Data")

        # Calculate parking cost based on duration
        for idx, row in df.iterrows():
            try:
                datetime_obj = datetime.datetime.strptime(row['Date Time'], '%Y-%m-%d %H:%M:%S')
                current_time = datetime.datetime.now()
                duration = current_time - datetime_obj
                hours = duration.total_seconds() / 3600
                cost = hours * 5  # Assuming $5 per hour parking cost
                tk.Label(display_window, text=f"Plate Number: {row['Plate Number']}, Date Time: {row['Date Time']}, "
                                               f"Unique Random Code: {row['Unique Random Code']}, Parking Cost: ${cost:.2f}").pack()
            except ValueError:
                tk.Label(display_window, text="Error: Invalid Date Time Format").pack()

if __name__ == "__main__":
    root = tk.Tk()
    app = ParkingLotApp(root)
    root.mainloop()
